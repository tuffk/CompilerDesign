/* File: literals.int64
 * Verifies that the implementation of literal values meet the specified
 * requirements.
 * (C) 2017 Ariel Ortiz, ITESM CEM
 */

var fails;

assert(value, value, message) {
    if (value != value) {
        fails = fails + 1;
        prints("Assertion failure: ");
        prints(message);
        println();
    }
}

main() {
    var s, a, i, c;
    fails = 0;
    assert(true, 1, "true must be equal to 1");
    assert(false, 0, "false must be equal to 0");
    assert(0b1010011010, 666, "error in binary literal");
    assert(0o1232, 666, "error in octal literal");
    assert(0x29A, 666, "error in hexadecimal literal");
    assert(0xFFFFFFFFFFFFFFFF, -1,
        "error in least negative hexadecimal literal");
    assert('\n', 10, "error in newline literal");
    assert('\r', 13, "error in carriage return literal");
    assert('\t', 9, "error in tab literal");
    assert('\\', 92, "error in backslash literal");
    assert('\'', 39, "error in single quote literal");
    assert('\"', 34, "error in double quote literal");
    assert('\u000041', 'A', "error in letter A literal code point");
    assert('\u0020AC', 8364, "error in euro literal code point");
    s = "\u0000A1\u0020ACste ni\u0000F1o \u0020ACst\u0000E1 bien \u0000D1o\u0000F1o!\n";
    a = {161, 8364, 115, 116, 101, 32, 110, 105, 241, 111, 32, 8364, 115, 116,
         225, 32, 98, 105, 101, 110, 32, 209, 111, 241, 111, 33, 10};
    i = 0;
    for (c in s) {
        assert(get(a, i), c, "error in string literal");
        i = i + 1;
    }
    printi(fails);
    prints(" assertion failure(s) found.")
    println();
    prints(a);
}
